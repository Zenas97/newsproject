version: "1.0"
services:
    web:
        build:
            context: ./Web
        container_name: web
        hostname: webHost
        user: root
        ports:
            - 8080:8080
        volumes: 
            - type: bind
              source: ./Web/newsproject/target
              target: /app
    db:
        build:
            context: ./Database
        container_name: database
        hostname: dbHost
        user: root
        ports:
            - 3310:3306
        environment:
            MYSQL_ROOT_PASSWORD: qwerty
            MYSQL_USER: admin
            MYSQL_PASSWORD: admin
            MYSQL_DATABASE: newsproject
        volumes:
            - type: volume
              source: db-volume
              target: /var/lib/mysql
    
    phpmyadmin:
        image: phpmyadmin:latest
        container_name: phpmyadmin-container
        hostname: phpadminHost
        user: root
        depends_on: 
            - db
        environment: 
            - PMA_ARBITRARY=1
            - PMA_HOST=dbHost
            - PMA_USER=admin
            - PMA_PASSWORD=admin
        ports:
            - 8082:80
            
    logstash:
        build:
            context: ./Logstash
        container_name: logstashContainer
        user: root
        depends_on:
            - kafka
            - db
        hostname: logstashHost
        volumes:
            - type: volume
              source: logstash-volume
              target: /usr/share/logstash/jdbc_info 

    zookeeper:
        image: bitnami/zookeeper:latest
        user: root
        container_name: zookeeper-server-temp
        hostname: zookeeperHost
        environment: 
            - ALLOW_ANONYMOUS_LOGIN=yes
        volumes: 
            - type: volume
              source: zookeeper-volume
              target: /bitnami/zookeeper
 
    kafka:
        image: bitnami/kafka:latest
        container_name: kafka-server-temp
        hostname: kafkaHost
        user: root
        depends_on: 
            - zookeeper
        environment: 
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeperHost:2181
            - ALLOW_PLAINTEXT_LISTENER=yes
        volumes: 
            - type: volume
              source: kafka-volume
              target: /bitnami/kafka
    
    kafka-topic-creation:
        image: bitnami/kafka:latest
        container_name: kafka-server-temp-creation
        hostname: kafkaHost
        user: root
        command: kafka-topics.sh --create --zookeeper zookeeperHost:2181 --partitions 1 --replication-factor 1 --topic newsTopic
        depends_on: 
            - kafka
        environment: 
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeperHost:2181
        volumes: 
            - type: volume
              source: kafka-volume
              target: /bitnami/kafka  

    spark-streaming:
        build:
            context: ./Spark
        container_name: spark-streaming
        hostname: sparkHost
        user: root
        depends_on: 
            - kafka
            - elasticSearch
        command: ./spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.1.2,org.elasticsearch:elasticsearch-spark-30_2.12:7.13.3 --class newsproject.Main /opt/bitnami/spark/program/newsproject-0.0.1-SNAPSHOT.jar 1
        ports:
            - 4040:4040
        volumes:
            - type: bind
              source: ./Spark/sparkJar
              target: /opt/bitnami/spark/program
            - type: volume
              source: spark-model-volume
              target: /opt/bitnami/spark/model

    spark-training:
        build:
            context: ./Spark
        container_name: spark-training
        hostname: sparkHostTraining
        user: root
        depends_on: 
            - kafka
        command: ./spark-submit --class newsproject.Main /opt/bitnami/spark/program/newsproject-0.0.1-SNAPSHOT.jar 0
        ports:
            - 4041:4040
        volumes:
            - type: bind
              source: ./Spark/sparkJar
              target: /opt/bitnami/spark/program
            - type: volume
              source: spark-model-volume
              target: /opt/bitnami/spark/model

    elasticSearch:
        image: elasticsearch:7.13.3
        container_name: elasticsearch-container
        hostname: elasticHost
        user: root
        environment: 
            - discovery.type=single-node
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ports:
            - 9200:9200
            - 9300:9300
        volumes:
            - type: volume
              source: elasticsearch-volume
              target: /usr/share/elasticsearch/data
    kibana:
        image: kibana:7.13.3
        container_name: kibana-container
        hostname: kibanaHost
        environment: 
            - ELASTICSEARCH_HOSTS=http://elasticHost:9200
        depends_on: 
            - elasticSearch
        ports:
            - 5601:5601
    copy-default-model:
        image: debian
        container_name: default-model-copy-container
        volumes:
            - type: volume
              source: spark-model-volume
              target: /model    
            - type: bind
              source: ./Spark/defaultModel
              target: /temp
        command: cp -r /temp/. /model      

volumes:
    zookeeper-volume:
        name: zookeeper-volume
    kafka-volume:
        name: kafka-volume
    spark-model-volume:
        name: spark-model-volume
    elasticsearch-volume:
        name: elasticsearch-volume
    logstash-volume:
        name: logstash-volume
    db-volume:
        name: db-volume
networks:
    default:
        name: my-app-network

